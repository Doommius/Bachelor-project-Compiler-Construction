TIL tree.h
typedef struct EXP {
    int lineno;
    kindArithmetic kind;
    union {
        char *idE;
        int intconstE;
        struct {struct EXP *left; struct EXP *right;} val;
    } data;
} EXP;

/*
typedef enum {idK,intconstK,timesK,divK,plusK,minusK} kind;
typedef struct EXP {
  int lineno;
  kind kind;
  union {
    char *idE;
    int intconstE;
    struct {struct EXP *left; struct EXP *right;} timesE;
    struct {struct EXP *left; struct EXP *right;} divE;
    struct {struct EXP *left; struct EXP *right;} plusE;
    struct {struct EXP *left; struct EXP *right;} minusE;
  } val;
} EXP;

EXP *makeEXPid(char *id);

EXP *makeEXPintconst(int intconst);

EXP *makeEXPtimes(EXP *left, EXP *right);

EXP *makeEXPdiv(EXP *left, EXP *right);

EXP *makeEXPplus(EXP *left, EXP *right);

EXP *makeEXPminus(EXP *left, EXP *right);
*/

TIL tree.c

/*
EXP *makeEXPid(char *id)
{ EXP *e;
  e = NEW(EXP);
  e->lineno = lineno;
  e->kind = idK;
  e->val.idE = id;
  return e;
}

EXP *makeEXPintconst(int intconst)
{ EXP *e;
  e = NEW(EXP);
  e->lineno = lineno;
  e->kind = intconstK;
  e->val.intconstE = intconst;
  return e;
}

EXP *makeEXPtimes(EXP *left, EXP *right)
{ EXP *e;
  e = NEW(EXP);
  e->lineno = lineno;
  e->kind = timesK;
  e->val.timesE.left = left;
  e->val.timesE.right = right;
  return e;
}

EXP *makeEXPdiv(EXP *left, EXP *right)
{ EXP *e;
  e = NEW(EXP);
  e->lineno = lineno;
  e->kind = divK;
  e->val.divE.left = left;
  e->val.divE.right = right;
  return e;
}

EXP *makeEXPplus(EXP *left, EXP *right)
{ EXP *e;
  e = NEW(EXP);
  e->lineno = lineno;
  e->kind = plusK;
  e->val.plusE.left = left;
  e->val.plusE.right = right;
  return e;
}

EXP *makeEXPminus(EXP *left, EXP *right)
{ EXP *e;
  e = NEW(EXP);
  e->lineno = lineno;
  e->kind = minusK;
  e->val.minusE.left = left;
  e->val.minusE.right = right;
  return e;
}
 */

TIL exp.y

/*
exp : tIDENTIFIER
        {$$ = makeEXPid($1);}
    | tINTCONST
      {$$ = makeEXPintconst($1);}
    | exp '*' exp
      {$$ = makeEXPArithmeticstructure($1,$3,timesK);}
    | exp '/' exp
      {$$ = makeEXPArithmeticstructure($1,$3,divK);}
    | exp '+' exp
      {$$ = makeEXPArithmeticstructure($1,$3,plusK);}
    | exp '-' exp
      {$$ = makeEXPArithmeticstructure($1,$3,minusK);}
    | exp '%' exp
      {$$ = makeEXPArithmeticstructure($1,$3,modK);}
    | '(' exp ')'
      {$$ = $2;}
;*/

